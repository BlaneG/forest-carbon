import sys

import numpy as np
import pandas as pd
from plotly import express as px
from plotly import graph_objects as go
from plotly.subplots import make_subplots

sys.path.append('..')
from ghg_tools.climate_metrics import (
    dynamic_GWP,
    temperature_response,
    AGTP
)
from forest_carbon import colors

MARGIN = dict(l=10, r=10, t=10)

def radiative_forcing_plot(radiative_forcing, time_horizon):
    fig = px.line(x=time_horizon, y=radiative_forcing, template='simple_white')
    fig.add_hline(y=0.0)
    fig.update_yaxes(
        title={'text': 'Radiative forcing (W per m2)'},
        tickformat='e')
    fig.update_xaxes(title={'text': 'Time since harvest (years)'},)
    fig.add_trace(go.Scatter(x=[0, 120], y=[0, 0], mode='lines', marker_color='black'))
    fig.update_layout(
        showlegend=False,)
    return fig


def temperature_response_plot(temp_response, time_horizon):
    fig = px.line(x=time_horizon, y=temp_response, template='simple_white')
    fig.update_yaxes(
        title={'text': 'Temperature response (k)'},
        tickformat='e')
    fig.update_xaxes(title={'text': 'Time since harvest (years)'},)
    fig.add_trace(go.Scatter(x=[0, 120], y=[0, 0], mode='lines', marker_color='black'))
    fig.update_layout(
        showlegend=False)
    return fig


def make_summary_table(
        flux_data,
        net_annual_carbon_flux)->pd.DataFrame:
    """
    Parameters
    --------------
    flux_data : dict
        Output from generate_flux_data
    net_annual_carbon_flux : np.ndarray
        Temporal emission vactor.
        """
    GWP_flux = dynamic_GWP(100, net_annual_carbon_flux[0:1001], 'co2')
    AGWP_emissions = temperature_response(100, net_annual_carbon_flux[0:1001], 'co2', step_size=0.1)
    GTP_flux = (AGWP_emissions/AGTP('co2', 100))[0]
    results = pd.DataFrame(
        columns=['forest_regrowth', 'biomass_decay', 'energy', 'short_lived_products', 'long_lived_products', 'net'],
        index=['emissions', 'removals', 'net C balance', 'GWP', 'GTP'])

    for key in flux_data.keys():
        result = np.sum(flux_data[key].pdf) * flux_data[key].step_size * flux_data[key].initial_carbon_stock
        if key=='forest_regrowth':
            results.loc['removals', key] = result
        elif key in ['biomass_decay', 'energy', 'short_lived_products', 'long_lived_products']:
            results.loc['emissions', key] = result
    results.loc['net C balance', 'net'] = results.sum().sum()
    results.loc['GTP', 'net'] = GTP_flux
    results.loc['GWP', 'net'] = GWP_flux
    return results


# For mapping to color keys
name_map = {
    'forest_regrowth': 'forest regrowth',
    'biomass_decay': 'biomass decay',
    'energy': 'energy',
    'short_lived_products': 'short-lived products',
    'long_lived_products': 'long-lived products',
    'net': 'net'
    }

def plot_summary_results(results)->go.Figure:
    """Plot the summary results generated by `make_summary_table`."""
    
    # Validate contract with results
    assert(set(results.columns)==set([
        'forest_regrowth', 'biomass_decay', 'energy',
        'short_lived_products', 'long_lived_products', 'net']))
    assert(set(results.index.tolist())==set([
        'emissions', 'removals', 'net C balance', 'GWP', 'GTP']))
    x = results.index.tolist()
    fig = make_subplots(specs=[[{"secondary_y": True}]])

    new_colors = {'net': 'black', **colors}
    # Adding traces to plot.
    for label, values in results.iteritems():
        color_map = name_map[label]
        color = new_colors[color_map]
        if label in ['GWP', 'GTP']:
            fig.add_trace(
                go.Bar(x=x, y=values, text=values, textposition='auto', name=label, marker_color=color),
            secondary_y=True)
        else:
            fig.add_trace(
                go.Bar(x=x, y=values, text=values, textposition='auto', name=label, marker_color=color),
            secondary_y=False)

    fig.update_yaxes(
        title_text="GHG emissions (kg CO<sub>2</sub>)",
        secondary_y=False)
    fig.update_yaxes(
        title_text="Climate effect (kg CO<sub>2</sub> eq)",
        secondary_y=True)
    fig.update_layout(
        barmode='stack', template='simple_white',
        margin=MARGIN, height=400)
    fig.update_layout(yaxis2=dict(title='title'))
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    return fig
